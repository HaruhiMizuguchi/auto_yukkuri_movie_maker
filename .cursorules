# ゆっくり動画自動生成ツール - Cursor IDE 開発ルール

## 🎯 プロジェクト概要
このプロジェクトは、AI/LLM/TTS/画像生成モデルを連携させ、ゆっくり動画を企画からYouTube投稿まで自動生成するツールです。

## 📋 必須開発ルール

### 1. flow_definition.yaml を常に参照
- **すべての開発作業前に `docs/flow_definition.yaml` を確認すること**
- 各モジュールの入力と出力の仕様を明確に理解してから実装
- データフローとディレクトリ構造に従って開発
- ファイルパスや構造は flow_definition.yaml で定義された形式に厳密に従う

### 2. テスト駆動開発 (TDD) を徹底
- **コードを書く前に必ずテストを書く**
- Red-Green-Refactor サイクルを遵守
- 単体テスト、統合テスト、E2Eテストの階層を意識
- テストカバレッジ 80% 以上を目標
- `tests/` ディレクトリに適切なテストファイルを配置

### 3. 入力・出力の明確化
- 関数やクラスの引数と戻り値の型を必ず指定 (Type Hints)
- docstring で入力・出力・副作用を明記
- flow_definition.yaml の schema に従ったデータ構造を使用
- バリデーション機能を必ず実装

## 🔧 コーディング規約

### Python スタイル
- PEP 8 に準拠
- Black でフォーマット
- isort で import を整理
- pylint / flake8 でリンティング
- mypy で型チェック

### ファイル構成
```
src/
├── core/           # コアロジック
├── modules/        # 各ステップのモジュール
├── utils/          # ユーティリティ
├── config/         # 設定ファイル
└── __init__.py

tests/
├── unit/           # 単体テスト
├── integration/    # 統合テスト
├── e2e/           # E2Eテスト
└── fixtures/       # テストデータ
```

### 命名規則
- クラス: PascalCase (例: `ThemeSelector`)
- 関数・変数: snake_case (例: `generate_script`)
- 定数: UPPER_SNAKE_CASE (例: `MAX_RETRY_COUNT`)
- ファイル: snake_case.py (例: `script_generator.py`)

## 📝 ドキュメント要件

### コメント・docstring
- 各関数・クラスに適切な docstring
- 複雑なロジックには inline コメント
- TODO/FIXME/HACK を明確にタグ付け

### README・ドキュメント
- 機能追加時は関連ドキュメントも更新
- API仕様書を最新に保つ
- 使用例とサンプルコードを提供

## 🛡️ 品質保証

### エラーハンドリング
- 例外処理を適切に実装
- ユーザーフレンドリーなエラーメッセージ
- ログ出力で問題の特定を容易に
- リトライ機能を適切に実装

### ログ・監視
- 構造化ログ (JSON形式) を使用
- ログレベルを適切に設定 (DEBUG/INFO/WARNING/ERROR)
- 処理時間と処理量の計測
- API呼び出し回数とレート制限の監視

### パフォーマンス
- 大容量ファイル処理時のメモリ効率を考慮
- 並列処理・非同期処理を適切に活用
- キャッシュ機能で API 呼び出しを最適化
- プロファイリングでボトルネックを特定

## 🔐 セキュリティ・法令遵守

### API キー・認証情報
- 環境変数 (.env) で管理
- 決してコードにハードコーディングしない
- .gitignore で機密情報をコミット対象外に

### 著作権・利用規約
- 二次創作ガイドライン (東方Project等) を遵守
- YouTube 利用規約を遵守
- 著作権法を遵守
- 使用する音楽・画像の著作権を確認

## 🚀 CI/CD・デプロイ

### Git ワークフロー
- feature ブランチで開発
- PR 作成時に自動テスト実行
- コードレビューを必須化
- main ブランチは常にデプロイ可能な状態を維持

### **タスク完了時の必須手順**
- **各タスク完了時は必ずコミット・プッシュを実行**
- コミット前に必ずテストの実行を確認
- 意味のある単位でコミットを分割
- プッシュ後はCIパイプラインの結果を確認

### **マージ前の必須確認事項**
- **既存コードとの統合テストがすべて通ることを確認**
- 競合解決後は再度フルテストを実行
- コードレビューの承認を取得
- feature ブランチが最新のmainブランチと同期済み
- ドキュメントとコメントが更新済み

### **継続的インテグレーション**
- プッシュ時に自動でリンティング・テスト実行
- テスト失敗時は即座に修正対応
- main ブランチへのマージは必ずPR経由
- マージ後は速やかにfeature ブランチを削除

### コミットメッセージ
```
feat: 新機能追加
fix: バグ修正
docs: ドキュメント更新
style: コードスタイル修正
refactor: リファクタリング
test: テスト追加・修正
chore: その他の作業
```

## 📊 開発効率化

### 開発環境
- 仮想環境 (venv) を使用
- requirements.txt / requirements-dev.txt を最新に保つ

### IDE 設定
- 自動保存時のフォーマット有効化
- リアルタイムリンティング有効化
- 型チェック (mypy) を統合
- デバッガー設定を共有

## 🔍 デバッグ・トラブルシューティング

### ログ分析
- 各ステップの処理時間を記録
- 入力データのバリデーション結果をログ出力
- API レスポンスの詳細をデバッグログに保存

### 再現性確保
- ランダムシードを設定
- テストデータのバージョン管理
- 実行環境の詳細記録

## ⚡ パフォーマンス最適化

### メモリ管理
- 大容量音声・動画ファイルの効率的処理
- ストリーミング処理でメモリ使用量を削減
- 不要なオブジェクトの明示的な削除

### 処理速度
- 並列処理でマルチコア活用
- キャッシュでAPI呼び出し回数削減
- 事前計算で実行時処理を軽減

---

## 💡 開発時のチェックリスト

### 実装前
- [ ] flow_definition.yaml で入力・出力仕様を確認
- [ ] 既存のテストケースを確認
- [ ] 依存関係を特定

### 実装中
- [ ] テストを先に書く (TDD)
- [ ] 型注釈を適切に付与
- [ ] docstring で仕様を明記
- [ ] エラーハンドリングを実装

### 実装後
- [ ] テストがすべて通る
- [ ] リンター・フォーマッターを実行
- [ ] ドキュメントを更新
- [ ] パフォーマンステストを実行
- [ ] **変更をコミット・プッシュ**
- [ ] **CIパイプラインが正常完了**

### PR作成前
- [ ] コードレビューの観点で自己チェック
- [ ] 関連するissueとの紐付け確認
- [ ] 破壊的変更がないか確認
- [ ] **mainブランチとの統合テストが通る**
- [ ] **競合が解決済み**

### **マージ実行前**
- [ ] **すべてのテストが通ることを最終確認**
- [ ] **コードレビューが承認済み**
- [ ] **CI/CDパイプラインが正常完了**
- [ ] **ドキュメントが最新状態**

このルールに従って、高品質で保守性の高いコードを開発してください。 